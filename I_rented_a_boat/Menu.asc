// new module script
#define THEMED_BTN_COUNT 17
#define SAVESLOT_COUNT 9
struct ThemedButton{
  Button* btn;
  DynamicSprite* Sprite_Normal;
  DynamicSprite* Sprite_Over;
  DynamicSprite* Sprite_Pushed;
};

ThemedButton _themed_btn[THEMED_BTN_COUNT];
ThemedButton _themed_save_btn[SAVESLOT_COUNT];
ThemedButton _themed_load_btn[SAVESLOT_COUNT];
bool _previousMouseVisibility;

bool _hasContinue(){
  ListBoxSaves.Clear();
  ListBoxSaves.FillSaveGameList();
  return ListBoxSaves.ItemCount > 0;
}

bool _IsTitleMenu()
{
  return player.Room == 34;  
}

void _AdjustWindowedBtnVisibility()
{  
  menu_opt_btn_wind.Visible = !System.Windowed;
  menu_opt_btn_full.Visible = System.Windowed;
}

void _HideTitle()
{
  if(_IsTitleMenu()) gTitle.Visible = false;
}

void _ShowTitle()
{
  if(_IsTitleMenu()) gTitle.Visible = true;  
}

void _ShowMenu()
{
  if(_IsTitleMenu()) return;

  menu_btn_continue.Visible = true;
  gMenu.Visible = true;
  _previousMouseVisibility = mouse.Visible;
  mouse.Visible = true;
}

void _HideMenu()
{
  if(_IsTitleMenu()) return;
  
  gMenu.Visible = false;
  mouse.Visible = _previousMouseVisibility;
}

void _DoBack(GUI* guiToBack)
{
  Sound_SFXPlay(aCancel);
  gMenu.Transparency = 0;
  guiToBack.Visible = false;  
  _ShowTitle();
}

void _DoForward(GUI* guiToAdvance)
{
  gMenu.Transparency = 85;
  _HideTitle();
  guiToAdvance.Visible = true; 
  Sound_SFXPlay(aAccept); 
}

void _Menu_m_New()
{
  _DoForward(gMenu_NewGame);
}

void _Menu_m_Save()
{
  _DoForward(gMenu_SaveGame);
}

void _Menu_m_Load()
{
  _DoForward(gMenu_LoadGame);
}

void _Menu_m_Opt()
{
  _AdjustWindowedBtnVisibility();
  _DoForward(gMenu_Options);  
}

void _Menu_m_Exit()
{
  _DoForward(gMenu_Exit);
}

void _Menu_m_Controls()
{
  _DoForward(gMenu_Controls);  
}

void _Menu_m_Continue()
{
  if(_IsTitleMenu())
  {
    ListBoxSaves.FillSaveGameList();
    RestoreGameSlot(ListBoxSaves.SaveGameSlots[0]);
  }
  else
  {
    _HideMenu();
  }
}

void _Menu_exit_yes()
{
  if(_IsTitleMenu())
  {
    QuitGame(0);
  }
  else
  {
    RestartGame();  
  }
}

void _Menu_exit_no()
{
  _DoBack(gMenu_Exit);
}

void _Menu_newGame_no()
{
  _DoBack(gMenu_NewGame);
}

void _Menu_loadGame_back()
{
  _DoBack(gMenu_LoadGame);
}

void _Menu_saveGame_back()
{
  _DoBack(gMenu_SaveGame);
}

void _Menu_opt_back()
{
  _DoBack(gMenu_Options);
}

void _Menu_ctrl_back()
{
  _DoBack(gMenu_Controls);  
}

void _Menu_opt_fullscreen()
{
  System.Windowed = false;
  _AdjustWindowedBtnVisibility();
}

void _Menu_opt_windowed()
{
  System.Windowed = true;
  _AdjustWindowedBtnVisibility();
}

void _Menu_newGame_yes()
{
  gMenu.Transparency = 0;
  gMenu_NewGame.Visible = false;
  Sound_SFXPlay(aNewgame);
  player.ChangeRoom(31);
}

void _Menu_loadGame_s(int slot)
{
  gMenu.Transparency = 0;
  gMenu_LoadGame.Visible = false;  
}

void _Menu_saveGame_s(int slot)
{
  if(slot == 1) slot = 99;
  CustomSave.Save(slot);
  gMenu.Transparency = 0;
  gMenu_SaveGame.Visible = false;  
}

void _ToggleMenu()
{
  if(gMenu.Visible) _HideMenu();
  else _ShowMenu();
}

void _DoEscapeKey()
{
  if(gMenu_Exit.Visible) {
    _Menu_exit_no();
  } 
  else if(gMenu_LoadGame.Visible) {
    _Menu_loadGame_back();
  }
  else if(gMenu_SaveGame.Visible) {
    _Menu_saveGame_back();
  }
  else if(gMenu_Options.Visible) {
    _Menu_opt_back();
  }
  else if(gMenu_NewGame.Visible) {
    _Menu_newGame_no();
  }
  else if(gMenu_Controls.Visible) {
    _Menu_ctrl_back();
  }
  else {
    _ToggleMenu();
  }
}

void _DoAcceptKey()
{
  if(gMenu_Exit.Visible) {
    _Menu_exit_yes();
  } 
  else if(gMenu_NewGame.Visible) {
    _Menu_newGame_yes();
  }
}

// To work around the AGS bug where antialiasing "pokes holes" in semi-transparent canvases
void drawStringWrappedAA(this DrawingSurface*, int x, int y, int width, FontType font, Alignment alignment, String message, int transparency)
{
  DynamicSprite* textSprite = DynamicSprite.Create(this.Width, this.Height, true);
  DrawingSurface* textSurface = textSprite.GetDrawingSurface();
  textSurface.DrawingColor = this.DrawingColor;
  textSurface.DrawStringWrapped(x, y, width, font, alignment, message);
  textSurface.Release();
  this.DrawImage(0, 0, textSprite.Graphic, transparency);
  textSprite.Delete();
}

DynamicSprite* _ApplyThemeBtn(int bgcolor, int txtcolor, int i)
{
  DynamicSprite* spr, tmpspr, tmpspr2, tmpspr3;
  DrawingSurface* surf;
  FontType font = _themed_btn[i].btn.Font;
  String txt = _themed_btn[i].btn.Text;
  Alignment align = _themed_btn[i].btn.TextAlignment;
  int width = _themed_btn[i].btn.Width;
  int height = _themed_btn[i].btn.Height;
  
  spr = DynamicSprite.Create(width, height, true);
  tmpspr = DynamicSprite.Create(width, height, true);
  tmpspr2 = DynamicSprite.Create(width, height, true);
  tmpspr3 = DynamicSprite.Create(width, height, true);
  surf = tmpspr2.GetDrawingSurface();
  surf.Clear(bgcolor);
  surf.Release();
  
  surf = tmpspr3.GetDrawingSurface();
  surf.DrawingColor = 0;
  surf.drawStringWrappedAA(-1, 0, width, font, align, txt, 0);
  surf.drawStringWrappedAA(1, 0, width, font, align, txt, 0);
  surf.drawStringWrappedAA(0, -1, width, font, align, txt, 0);
  surf.drawStringWrappedAA(0, 1, width, font, align, txt, 0);
  surf.Release();
  
  surf = tmpspr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr2.Graphic, 75);
  surf.DrawImage(0, 0, tmpspr3.Graphic, 25);
  surf.DrawingColor = txtcolor;
  surf.drawStringWrappedAA(0, 0, width, font, align, txt, 0);
  surf.Release();
  tmpspr2.Delete();
  tmpspr3.Delete();
  
  surf = spr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr.Graphic, 10);
  surf.Release();
  tmpspr.Delete();
  return spr;
}

void _SetButtons()
{
  // order doesn't matter
  _themed_btn[0].btn = menu_btn_new;
  _themed_btn[1].btn = menu_btn_continue;
  _themed_btn[2].btn = menu_btn_save;
  _themed_btn[3].btn = menu_btn_load;
  _themed_btn[4].btn = menu_btn_exit;
  _themed_btn[5].btn = menu_btn_opt;  
  _themed_btn[6].btn = menu_btn_ctrl;  
  _themed_btn[7].btn = menu_exit_btn_no;
  _themed_btn[8].btn = menu_exit_btn_yes;  
  _themed_btn[9].btn = menu_newg_btn_no;
  _themed_btn[10].btn = menu_newg_btn_yes;  
  _themed_btn[11].btn = menu_load_btn_back;
  _themed_btn[12].btn = menu_save_btn_back;
  _themed_btn[13].btn = menu_opt_btn_back;
  _themed_btn[14].btn = menu_opt_btn_full;
  _themed_btn[15].btn = menu_opt_btn_wind;
  _themed_btn[16].btn = menu_ctrl_btn_back;
}

void _ApplyTheme()
{
  int bgcolor_normal = 46846;
  int bgcolor_ovr = 46584;
  int bgcolor_pushed = 35986;
  int txtcolor_normal = 57051;
  int txtcolor_ovr = 65535;
  int txtcolor_pushed = 57215;  
  
  for(int i=0; i<THEMED_BTN_COUNT; i++)
  {
    _themed_btn[i].Sprite_Normal = _ApplyThemeBtn(bgcolor_normal, txtcolor_normal, i);
    _themed_btn[i].Sprite_Over = _ApplyThemeBtn(bgcolor_ovr, txtcolor_ovr, i);
    _themed_btn[i].Sprite_Pushed = _ApplyThemeBtn(bgcolor_pushed, txtcolor_pushed, i);

    _themed_btn[i].btn.NormalGraphic = _themed_btn[i].Sprite_Normal.Graphic;
    _themed_btn[i].btn.MouseOverGraphic = _themed_btn[i].Sprite_Over.Graphic;
    _themed_btn[i].btn.PushedGraphic = _themed_btn[i].Sprite_Pushed.Graphic;
    _themed_btn[i].btn.Text = "";
  }
}

static void Menu::OnClick(GUIControl *control, MouseButton button)
{
  if(button == eMouseLeft) {
    switch(control)
    {
      case menu_btn_new:
        _Menu_m_New();
      break;
      case menu_btn_save:
        _Menu_m_Save();
      break;
      case menu_btn_load:
        _Menu_m_Load();
      break;
      case menu_btn_opt:
        _Menu_m_Opt();
      break;
      case menu_btn_exit:
        _Menu_m_Exit();
      break;
      case menu_btn_continue:
        _Menu_m_Continue();
      break;
      case menu_btn_ctrl:
        _Menu_m_Controls();
      break;
      case menu_exit_btn_no:
        _Menu_exit_no();
      break;
      case menu_exit_btn_yes:
        _Menu_exit_yes();
      break;
      case menu_newg_btn_no:
        _Menu_newGame_no();
      break;
      case menu_newg_btn_yes:
        _Menu_newGame_yes();
      break;
      case menu_load_btn_back:
        _Menu_loadGame_back();
      break;
      case menu_load_btn_s1:
        _Menu_loadGame_s(1);
      break;
      case menu_load_btn_s2:
        _Menu_loadGame_s(2);
      break;
      case menu_load_btn_s3:
        _Menu_loadGame_s(3);
      break;
      case menu_load_btn_s4:
        _Menu_loadGame_s(4);
      break;
      case menu_load_btn_s5:
        _Menu_loadGame_s(5);
      break;
      case menu_load_btn_s6:
        _Menu_loadGame_s(6);
      break;
      case menu_load_btn_s7:
        _Menu_loadGame_s(7);
      break;
      case menu_load_btn_s8:
        _Menu_loadGame_s(8);
      break;
      case menu_load_btn_s9:
        _Menu_loadGame_s(9);
      break;
      case menu_save_btn_back:
        _Menu_saveGame_back();
      break;
      case menu_save_btn_s1:
        _Menu_saveGame_s(1);
      break;
      case menu_save_btn_s2:
        _Menu_saveGame_s(2);
      break;
      case menu_save_btn_s3:
        _Menu_saveGame_s(3);
      break;
      case menu_save_btn_s4:
        _Menu_saveGame_s(4);
      break;
      case menu_save_btn_s5:
        _Menu_saveGame_s(5);
      break;
      case menu_save_btn_s6:
        _Menu_saveGame_s(6);
      break;
      case menu_save_btn_s7:
        _Menu_saveGame_s(7);
      break;
      case menu_save_btn_s8:
        _Menu_saveGame_s(8);
      break;
      case menu_save_btn_s9:
        _Menu_saveGame_s(9);
      break;
      case menu_opt_btn_back:
        _Menu_opt_back();
      break;
      case menu_opt_btn_wind:
        _Menu_opt_windowed();
      break;
      case menu_opt_btn_full:
        _Menu_opt_fullscreen();
      break;
      case menu_ctrl_btn_back:
        _Menu_ctrl_back();
      break;
    }
  }
}

static bool Menu::HasContinue()
{
  return _hasContinue();
}

void game_start()
{
  _SetButtons();
  _ApplyTheme();
  menu_btn_continue.Visible = _hasContinue();
  _AdjustWindowedBtnVisibility();
}
// called when a key is pressed
function on_key_press(eKeyCode keycode) 
{
  if (keycode == eKeyEscape)
  {
    _DoEscapeKey();
  } 
  else if(keycode == eKeyReturn)
  {
    _DoAcceptKey();  
  }
  
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    _Menu_m_Exit();
  }
}