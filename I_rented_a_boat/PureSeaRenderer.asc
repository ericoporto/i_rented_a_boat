// new module script
int _YBuffer[321];

void _DrawVerticalLine(DrawingSurface* surf, int x, int ytop, int ybottom, int col, int size)
{
  if(ytop < 0) ytop = 0;
  if(ytop > ybottom) return;
  
  surf.DrawingColor = col;  
  surf.DrawLine(x, ytop, x, ybottom, size); 
}

float _dt_sea;
void RenderSeaOnly(DrawingSurface* surf, Vec3* p, float phi, float horizon, float scale_height, float distance, float col_mix_factor)
{
  float height = p.z; // let's make player vertical position be height to avoid confusing with z axis normal to the camera plane
    
  // precalculate viewing angle parameters
  float sinphi = Maths.Sin(phi);
  float cosphi = Maths.Cos(phi);       
       
  //surf.Clear();
  // initialize visibility array. Y position for each column on screen  
  for (int i=Frame_Odd*2; i<ScreenWidth+1; i+=4) {
    _YBuffer[i] = ScreenHeight;
    _DrawVerticalLine(surf, i, 0, ScreenHeight, COLOR_TRANSPARENT, 2);
  }

  if(Frame_Odd) _dt_sea +=0.125;

  // Draw from front to the back (low z coordinate to high z coordinate)
  float dz = 1.0;
  float z = 1.0;
  while (z < distance) {    
    // Find line on map. This calculation corresponds to a field of view of 90°
    float plx =  -cosphi * z - sinphi * z;
    float ply =   sinphi * z - cosphi * z;
    float prx =   cosphi * z - sinphi * z;
    float pry =  -sinphi * z - cosphi * z;
       
    // A little segment of line dx,dy that is normal to player angle, we will use to traverse from pl(x,y) to pr(x,y)
    float dx = (prx - plx) / ScreenWidth_AsFloat;
    float dy = (pry - ply) / ScreenWidth_AsFloat;
    
    // makes the camera coordinate in the same world space of the player
    plx+=p.x;
    ply+=p.y;
    
    float p_line_x = plx;
    float p_line_y = ply;
    
    // just pre-calculate to avoid doing on each step;
    float invz_scaled = scale_height/z;
   // float dx_x2 = 2.0*dx;
   // float dy_x2 = 2.0*dy;

    // we will use this later to darken the world far from the player
    int colormix = ClampI(FloatToInt(z*col_mix_factor/distance), 0, 15);
    int color_slide = colormix*Colors_Length;
    
    for (int i=Frame_Odd*2; i<ScreenWidth+1; i+=4) {
      
      float height_in_map = Maths.Sin(p_line_x * 0.2 + _dt_sea * 1.0) + Maths.Sin(p_line_x * 0.46  + _dt_sea * 1.5) + Maths.Sin(p_line_x * 0.66 + _dt_sea * 0.4) + Maths.Sin(p_line_y * 0.04 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.36 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.56 + _dt_sea * 0.8);
      //float height_in_map = Maths.Sin(p_line_x * 0.1 + _dt_sea * 1.0) + Maths.Sin(p_line_x * 0.23  + _dt_sea * 1.5) + Maths.Sin(p_line_x * 0.33 + _dt_sea * 0.4) + Maths.Sin(p_line_y * 0.02 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.18 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.28 + _dt_sea * 0.8);
      //float height_in_map = 2.0+4.0*Maths.Sin(p_line_x/16.0+_dt_sea)*Maths.Sin(p_line_y/16.0+_dt_sea);
      
      int height_on_screen = FloatToInt( (height - height_in_map) * invz_scaled + horizon );
      
      int px = FloatToInt(p_line_x);
      int py = FloatToInt(p_line_y);
      int color = 298;
      if(px & 16|| py & 16) color = 300;
      
      color = ShadedColors[color+color_slide];
      
      _DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color, 2);
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      } 
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    } 
    z += dz;
    dz += 0.25;
  }
}