// new module script
String _LastSentence;
Character* _LastCharacter;
Dialog* _ScheduledDialog;
int _m_opt_ticks_on_screen;

void _FontAdjust(Character* c)
{  
  if(bool_in_intro)
  {
    if(c == cJim)  Game.SpeechFont = eFontOpenSansIntro;
    else if(c == cJulie)  Game.SpeechFont = eFontPoppinsIntro;
    else if(c == cFriend)  Game.SpeechFont = eFontLatoIntro;
    else Game.SpeechFont = eFontIntro;
  }
  else 
  {
    if(c == cJim)  Game.SpeechFont = eFontOpenSans;
    else if(c == cJulie)  Game.SpeechFont = eFontPoppins;
    else if(c == cTalkie)  Game.SpeechFont = eFontLato;
    else Game.SpeechFont = eFontRadio;    
  }
}

void IntroSay(Character* c, String message)
{
  HorizontalAlignment align = eAlignLeft;
  if(c == cIntro) align = eAlignCenter;
  
  String prefixed_space = "";
  if(c == cJim) prefixed_space = "   ";
  else if(c == cJulie) prefixed_space = "        ";
  
  IntroStack.PushMessage(prefixed_space.Append(message), c.SpeechColor, align);
}

void MySay(this Character*, String message) 
{
  _m_opt_ticks_on_screen = 0;
  _FontAdjust(this);
  _LastCharacter = this;
  _LastSentence = message;
  if(!bool_in_intro) {
    gTextBox.AsTextWindow.TextColor = this.SpeechColor;
    this.Say(message);
    return;
  } 
  IntroSay(this, message);  
}

void StartDialog(Dialog* d)
{
  if(!bool_in_dialog)
  {
    bool_in_dialog = true;
    _ScheduledDialog = d; 
  }
}

#region INTRO_DIALOG_OPTIONS
/// <<< Intro Dialog Options
int intro_dlg_opt_color = 33;
int intro_dlg_opt_acolor = 65462;
int intro_dlg_opt_ncolor = 65535;
FontType intro_font = eFontIntro;

void i_run_active_option(DialogOptionsRenderingInfo *info)
{
  if ((info.ActiveOptionID > 0)  && 
      (info.DialogToRender.GetOptionState(info.ActiveOptionID) == eOptionOn)) 
  {
    IntroStack.Pop();
    info.RunActiveOption();
  }      
}

function i_dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{  
  // Create a 200x200 dialog options area at (50,100)
  info.X = 160;
  info.Y = 140;
  info.Width = 320;
  info.Height = 80;
  // Enable alpha channel for the drawing surface
  info.HasAlphaChannel = true;
}

function i_dialog_options_render(DialogOptionsRenderingInfo *info)
{
  info.Surface.Clear(intro_dlg_opt_color);
  int ypos = 0;
  // Render all the options that are enabled
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      if (info.ActiveOptionID == i)
        info.Surface.DrawingColor = intro_dlg_opt_acolor;
      else
        info.Surface.DrawingColor = intro_dlg_opt_ncolor;

      info.Surface.DrawStringWrapped(5, ypos, info.Width - 10, intro_font, eAlignLeft, info.DialogToRender.GetOptionText(i));
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), intro_font, info.Width - 10);
    }
  }
}

function i_dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  info.ActiveOptionID = 0;
  if (mouse.y < info.Y || mouse.y >= info.Y + info.Height ||
      mouse.x < info.X || mouse.x >= info.X + info.Width)
  {
    return; // return if the mouse is outside UI bounds
  }

  int ypos = 0;
  // Find the option that corresponds to where the mouse cursor is
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), intro_font, info.Width - 10);
      if ((mouse.y - info.Y) < ypos)
      {
        info.ActiveOptionID = i;
        return;
      }
    }
  }
}

function i_dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
  i_run_active_option(info);
}

function i_dialog_options_key_press(DialogOptionsRenderingInfo *info, eKeyCode keycode)
{
  if(keycode == eKeySpace) { i_run_active_option(info); return; }
  if(keycode< eKey1 || keycode> eKey9) return;
  
  int opts[10];
  
  int j = 1;
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      opts[j] = i;
      j++;
    }
  }

  int sel_opt = 1;
  switch(keycode)
  {
    case eKey1: sel_opt = 1; break;
    case eKey2: sel_opt = 2; break;
    case eKey3: sel_opt = 3; break;
    case eKey4: sel_opt = 4; break;
    case eKey5: sel_opt = 5; break;
    case eKey6: sel_opt = 6; break;
    case eKey7: sel_opt = 7; break;
    case eKey8: sel_opt = 8; break;
    case eKey9: sel_opt = 9; break;
    
  }
  
  info.ActiveOptionID = ClampI(opts[sel_opt], 1, info.DialogToRender.OptionCount);  
}

//// end of Intro Dialog Options >>> 
#endregion //INTRO_DIALOG_OPTIONS

#region MAIN_GAME_DIALOG_OPTIONS
/// <<< Main Game Dialog Options
int m_dlg_opt_color = 4196; // COLOR_TRANSPARENT;
int m_dlg_opt_acolor = 45025; //65462;
int m_dlg_opt_ncolor = 65535;
FontType m_font = eFontRadio;

int m_next_option(DialogOptionsRenderingInfo *info)
{
  int active_opt = info.ActiveOptionID;
  int opt_count = info.DialogToRender.OptionCount;
  
  if(active_opt == 0) active_opt = 1;
  do {
    if(active_opt<opt_count) active_opt++;
    else active_opt = 1;
  } while(info.DialogToRender.GetOptionState(active_opt) != eOptionOn);
  return active_opt;
}

int m_previous_option(DialogOptionsRenderingInfo *info)
{
  int active_opt = info.ActiveOptionID;
  int opt_count = info.DialogToRender.OptionCount;
  
  if(active_opt == 0) active_opt = 1;
  do {
    if(active_opt>1) active_opt--;
    else active_opt = opt_count;
  } while(info.DialogToRender.GetOptionState(active_opt) != eOptionOn);

  return active_opt;
}

void m_run_active_option(DialogOptionsRenderingInfo *info)
{
  if ((info.ActiveOptionID > 0)  && 
      (info.DialogToRender.GetOptionState(info.ActiveOptionID) == eOptionOn)) 
  {
    info.RunActiveOption();
  }      
}

function m_dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{  
  int width = 320;
  // figure the size
  int height = 0;
  
  height += GetTextHeight(_LastSentence, m_font, width - 10);
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      String line = String.Format("%d. ",i);
      line = line.Append(info.DialogToRender.GetOptionText(i));
      height += GetTextHeight(line, m_font, width - 10);
    }
  }
  
  height = height + 6;
  info.Width = width;
  info.Height = height;
  info.X = Screen.Width/2 - width/2;
  info.Y = Screen.Height/2 - height/2;
  info.HasAlphaChannel = true;
  info.ActiveOptionID = 0;
}

function m_dialog_options_render(DialogOptionsRenderingInfo *info)
{
  info.Surface.Clear(m_dlg_opt_color);
  int ypos = 0;
  
  info.Surface.DrawingColor = m_dlg_opt_ncolor;
  
  _m_opt_ticks_on_screen++;
  int transp = _m_opt_ticks_on_screen / 4;
  
  DynamicSprite* tmp_spr = DynamicSprite.Create(info.Width, 40, true);
  DrawingSurface* tmp_surf = tmp_spr.GetDrawingSurface();
  tmp_surf.DrawingColor = _LastCharacter.SpeechColor;
  tmp_surf.DrawStringWrapped(5, ypos, info.Width - 10, m_font, eAlignCenter, _LastSentence);
  tmp_surf.Release();
  
  if(transp< 100) {
    info.Surface.DrawImage(0, 0, tmp_spr.Graphic, transp);
  }
  
  ypos += GetTextHeight(_LastSentence, m_font, info.Width - 10);

  int j = 1;
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      if (info.ActiveOptionID == i)
        info.Surface.DrawingColor = m_dlg_opt_acolor;
      else
        info.Surface.DrawingColor = m_dlg_opt_ncolor;

      String line = String.Format("%d. ",j);
      line = line.Append(info.DialogToRender.GetOptionText(i));
      
      info.Surface.DrawStringWrapped(5, ypos, info.Width - 10, m_font, eAlignLeft, line);
      ypos += GetTextHeight(line, m_font, info.Width - 10);
      
      j++;
    }
  }
  
  tmp_spr.Delete();  
}

function m_dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  int tmp = info.ActiveOptionID;
  info.ActiveOptionID =  !tmp;
  info.ActiveOptionID = tmp;
}

function m_dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
  if (button == eMouseWheelNorth)
  {
    info.ActiveOptionID = m_next_option(info);
  }
  else if (button == eMouseWheelSouth)
  {
    info.ActiveOptionID = m_previous_option(info);
  }
  else if (button == eMouseLeft)
  {
    m_run_active_option(info);
  }
}

function m_dialog_options_key_press(DialogOptionsRenderingInfo *info, eKeyCode keycode)
{
  if(keycode == eKeySpace) { m_run_active_option(info); return; }
  if(keycode< eKey1 || keycode> eKey9) return;
  
  int opts[10];
  
  int j = 1;
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      opts[j] = i;
      j++;
    }
  }

  int sel_opt = 1;
  switch(keycode)
  {
    case eKey1: sel_opt = 1; break;
    case eKey2: sel_opt = 2; break;
    case eKey3: sel_opt = 3; break;
    case eKey4: sel_opt = 4; break;
    case eKey5: sel_opt = 5; break;
    case eKey6: sel_opt = 6; break;
    case eKey7: sel_opt = 7; break;
    case eKey8: sel_opt = 8; break;
    case eKey9: sel_opt = 9; break;
    
  }
  
  info.ActiveOptionID = ClampI(opts[sel_opt], 1, info.DialogToRender.OptionCount);
}

/// end of Main Game Dialog Options >>>
#endregion //MAIN_GAME_DIALOG_OPTIONS


#region MAIN_GAME_DIALOG_OPTIONS
function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{
  if(bool_in_intro) i_dialog_options_get_dimensions(info);
  else m_dialog_options_get_dimensions(info);
}

function dialog_options_render(DialogOptionsRenderingInfo *info)
{
  if(bool_in_intro) i_dialog_options_render(info);
  else m_dialog_options_render(info);
}

function dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  if(bool_in_intro) i_dialog_options_repexec(info);
  else m_dialog_options_repexec(info);
}

function dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
  if(bool_in_intro) i_dialog_options_mouse_click(info, button);
  else m_dialog_options_mouse_click(info, button);
}


function dialog_options_key_press(DialogOptionsRenderingInfo *info, eKeyCode keycode)
{
  if(bool_in_intro) i_dialog_options_key_press(info, keycode);
  else m_dialog_options_key_press(info, keycode);
}

// ----

void game_start()
{
  Game.SpeechFont = eFontRadio;
  Speech.SkipKey = eKeySpace;
  Speech.SkipStyle = eSkipKeyTime;
}

void repeatedly_execute()
{
  if(bool_in_dialog && _ScheduledDialog != null)
  {
    Dialog* d = _ScheduledDialog;
    _ScheduledDialog = null;
    d.Start();
    return;
  }
  
  if(bool_in_dialog)
  {
    bool_in_dialog = false;  
  }
}