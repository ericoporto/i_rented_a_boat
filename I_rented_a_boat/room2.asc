// room script file
#define DOOR_PARTS 8

Vec3* _sign_pos;
Vec3* _key_pos;
float _scale_height;
Vec3* _door_pos[DOOR_PARTS];
Character* _door_char[DOOR_PARTS];
ScreenPoint* _door_sp[DOOR_PARTS];

bool _schedule_unlock_door;
bool _is_door_unlocked;

void _adjust_cave_door_walkable()
{
  if(_is_door_unlocked) RestoreWalkableArea(6);
  else RemoveWalkableArea(6);
}

void _unlock_door_if_needed() 
{
  if(!_schedule_unlock_door) return;
  if(_is_door_unlocked) return;
  
  
  _schedule_unlock_door = false;
  CustomTransition_FadeOut(0.3, eBlockTween);
  Sound_SFXPlay(aJail_door);
  Wait(6);
  _is_door_unlocked = true;
  _adjust_cave_door_walkable();
  Wait(SecondsToLoops(0.3));
  CustomTransition_FadeIn(1.0, eBlockTween);
}

void _DoorSwap(int i, int k)
{
  Vec3* tmp_v3p = _door_pos[i];
  ScreenPoint* tmp_sp = _door_sp[i];
  Character* tmp_c = _door_char[i];
  
  _door_pos[i] = _door_pos[k];
  _door_sp[i] = _door_sp[k];
  _door_char[i] = _door_char[k];
  
  _door_pos[k] = tmp_v3p;
  _door_sp[k] = tmp_sp;
  _door_char[k] = tmp_c;
}

void _Door_BubbleSortZ()
{
  for(int i=0; i<DOOR_PARTS-1; i++)
  {
    for(int j=0; j<DOOR_PARTS-i-1; i++)
    {
      if(_door_sp[j].z < _door_sp[j+1].z)
      {
        _DoorSwap(i, j);
      }
    }    
  }  
}

void _AdjustDoorParts()
{
  if(!(Player_Pos.x > 873.0 && Player_Pos.x <988.0 && Player_Pos.y > 256.0 && Player_Pos.y < 359.0) || _is_door_unlocked) {
    for(int i=0; i<DOOR_PARTS; i++) {
      _door_char[i].Transparency = 100;
    }
    return;
  }
  
  for(int i=0; i<DOOR_PARTS; i++) {
    Character* c = _door_char[i];
    _door_sp[i] = CharacterProjectionAdjust(c, _scale_height, _door_pos[i]);
    if(c.Transparency != 100)
    {
      ViewFrame* vf = Game.GetViewFrame(c.View, c.Loop, c.Frame);
      c.Scaling = ClampI(FloatToInt(_door_sp[i].w*IntToFloat(Game.SpriteHeight[vf.Graphic])/20.0), 5, 200);    
    }
  }
  
  _Door_BubbleSortZ();

  for(int i=0; i<DOOR_PARTS; i++)
  {
    _door_char[i].Baseline = cBgRoom.Baseline + i + 1;
  }
}

void _AdjustDarkPoster()
{ 
  if(!(Player_Pos.x > 169.0 && Player_Pos.x <463.0 && Player_Pos.y > 389.0 && Player_Pos.y < 509.0))
  {
    cDarkPoster.Transparency = 100;
    cCaveKey.Transparency = 100;
    return;
  }
  
  CharacterProjectionAdjust(cDarkPoster, _scale_height, _sign_pos);
  if(cDarkPoster.Transparency != 100) {
    cDarkPoster.Scaling = ClampI(cDarkPoster.Scaling / 2, 5, 200);
    cDarkPoster.Tint(65, 48, 32,  90, ClampI(cDarkPoster.Scaling, 0, 100));
    cDarkPoster.Transparency = ClampI(25-cDarkPoster.Scaling/4, 0, 100);
  }
  
  if(!player.HasInventory(iKey))
  {
    ScreenPoint* sp = CharacterProjectionAdjust(cCaveKey, _scale_height, _key_pos);
    if(cCaveKey.Transparency != 100) {
      cCaveKey.Transparency = obj_fulloverdark.Transparency;
      if(cCaveKey.Transparency > 85) cCaveKey.Transparency = 100;
      cCaveKey.LockViewFrame(VIEW_ROTATING_KEY, 0,  ClampLoopI(cCaveKey.Frame + 1, 0, 15));
      hHotspot5.SetTextProperty("aName","Collect Key");
    } else {
      hHotspot5.SetTextProperty("aName","");  
    }
  }
  
}

function room_Load()
{
  cBgRoom.Baseline = 40;
  cDarkPoster.Baseline = 50;
  _scale_height = 64.0;
  Flashlight_SetObject(obj_flashlight);
  Sound_AmbientPlay(aAmb_cave);
  player.x = 16;
  player.y = 16;
  _sign_pos = Vec3.Create(390.0, 450.0, 12.0);
  _key_pos = Vec3.Create(320.0, 429.0, 12.0);
  
  _door_char[0] = cCaveDoor1;
  _door_char[1] = cCaveDoor2;
  _door_char[2] = cCaveDoor3;
  _door_char[3] = cCaveDoor4;
  _door_char[4] = cCaveDoor5;
  _door_char[5] = cCaveDoor6;
  _door_char[6] = cCaveDoor7;
  _door_char[7] = cCaveDoor8;
  int j = DOOR_PARTS;
  for(int i=0; i<DOOR_PARTS; i++) {
    float fi = IntToFloat(i);
    j=j-1;
    _door_pos[j] = Vec3.Create(917.5+28.0*fi/8.0,  290.5+31.0*fi/8.0, 12.0);
  }
  
  _adjust_cave_door_walkable();
  
  if(!(player.x > 169 && player.x <463 && player.y > 389 && player.y < 509)) {
    cDarkPoster.Transparency = 100;
    cCaveKey.Transparency = 100;
  }
  
  if(!(player.x > 873 && player.x <988 && player.y > 256 && player.y < 359)) {
    for(int i=0; i<DOOR_PARTS; i++) {
      _door_char[i].Transparency = 100;
    }
  }
  
}

function room_AfterFadeIn()
{
  CustomTransition_FadeIn(0.33, eBlockTween);
  if(Game.DoOnceOnly("save_first_time_in_cave"))
  {
    Wait(1);
    CustomSave.doAutoSave();
  }
}



function room_RepExec()
{
  _unlock_door_if_needed();
}

float  _FlashlightAdjust()
{
  float percent_flash =  GetFlashLightRaised();
  float color_mix = 68.0 - percent_flash*24.0;
  int black_transp = FloatToInt(percent_flash*100.0);
  obj_overdark.Transparency = ClampI(100 - black_transp, 0, 100);
  obj_fulloverdark.Transparency = ClampI(black_transp, 0, 100);
 
  return color_mix;
}

// add different colors in each way
// add shades on top

function repeatedly_execute_always()
{ 

  if(Frame & 4) return;
  _AdjustDarkPoster();
  _AdjustDoorParts();
  
  float color_mix = _FlashlightAdjust();
  RenderCurrentMapAsCave(_scale_height, 448.0, color_mix);  
}

function hHotspot22_Interact()
{
  if(Player_Angle < -2.8 || Player_Angle > 2.6)
  {
    if(bool_balloon_in_position)
    {
      // end game
      CustomTransition_FadeOut(0.5, eBlockTween, 0.0, eAgsColor_White);
      player.ChangeRoom(33, 196, 218);      
    }
    else 
    {
      CustomTransition_FadeOut(0.25, eBlockTween, 0.0, eAgsColor_White);
      player.ChangeRoom(1, 196, 218);
    }
  }
}

function hHotspot21_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween, 0.0, eAgsColor_White);
  player.ChangeRoom(3, 314, 411);
}

function hHotspot20_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween, 0.0, eAgsColor_White);
  player.ChangeRoom(4, 756, 337);
}

function hHotspot5_Interact()
{
  if(!player.HasInventory(iKey) && cCaveKey.Transparency < 60)
  {
    Sound_SFXPlay(aKey_pickup);
    player.AddInventory(iKey);
    hHotspot5.SetTextProperty("aName","");
    cCaveKey.Transparency = 100;
    hHotspot5.Enabled = false;
  }
}

function hHotspot23_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween, 0.0, eAgsColor_White);
  player.ChangeRoom(4, 470, 898);
}

function hHotspot8_Interact()
{
  if(_is_door_unlocked) return;
  if(_schedule_unlock_door) return;
  if(!player.HasInventory(iKey)) return;
  
  player.LoseInventory(iKey);
  hHotspot8.Enabled = false;
  _schedule_unlock_door = true;
}

function hHotspot24_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween, 0.0, eAgsColor_White);
  player.ChangeRoom(4, 884, 451);
}

function hHotspot25_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween);
  player.ChangeRoom(35); 
}
