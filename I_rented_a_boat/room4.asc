// room script file
Vec3* balloon_dest_pos;
Vec3* balloon_orig_pos;
Vec3* balloon_pos;
Vec3* radiotower_pos;
 ScreenPoint* _billb_balloon;
 ScreenPoint* _billb_radiotower;
 float _screen_height;
 
Tween _balloonTween;

bool _doHotspot8;
bool _HasWentUpAndTalkedOnce;
bool _CollectedDarkDevice;
bool _ConnectedDarkDevice;

Timer* BalloonMoving1;
Timer* BalloonMoving2;

void _CreateCave()
{
  map[Player_Map].DrawSprite(230, 475, 884, 65535);  
}

void on_call (eRoomScriptEvent value)
{
  if(value == eRSE_Room4_BalloonApproach)
  {
    if(Game.DoOnceOnly("balloon_shows_once"))
    {
      CustomSave.doAutoSave();
      _doHotspot8 = true;
    }    
  } 
  else if(value == eRSE_Room4_RestoreWalk1)
  {
    hotspot[8].Enabled = false;
    hotspot[8].SetTextProperty("aName","");
    RestoreWalkableArea(1);
    _HasWentUpAndTalkedOnce = true;
    Wait(2);
    CustomSave.doAutoSave();
  }
  else if(value == eRSE_Room4_CollectedDevice)
  {
    if(_CollectedDarkDevice) return;
    
    hotspot[9].Enabled = false;
    hotspot[9].SetTextProperty("aName","");
    player.AddInventory(iDarkDevice);
    _CollectedDarkDevice = true;
    float height = map[Player_Map].GetHeight(195, 849);
    map[Player_Map].SetHeightRect(height, 203, 849, 210, 856);
    Wait(4);
    CustomSave.doAutoSave();
  }
  else if(value == eRSE_Room4_ConnectedDevice)
  {
    if(_ConnectedDarkDevice) return;
    
    hotspot[10].Enabled = false;
    hotspot[10].SetTextProperty("aName","");
    player.LoseInventory(iDarkDevice);
    _ConnectedDarkDevice = true;
    float height = map[Player_Map].GetHeight(456, 874);
    height = height + 16.0;
    map[Player_Map].CopyColorRect(8, 8, 890, 459, 456, 874); 
    map[Player_Map].SetHeightRect(height, 456, 874, 463, 881);
    Wait(2);
    TweenShakeScreen(0.4, 2, 4, 2, 32, eEaseInBackTween, eNoBlockTween);
    Wait(SecondsToLoops(0.2));
    _CreateCave();
    Wait(SecondsToLoops(0.2));
    CustomSave.doAutoSave();
  }
}

bool _UpdateMoveBalloon()
{
  bool result = _balloonTween.IsPlaying();
  if(result)
  {
    _balloonTween.Update();
    balloon_pos = balloon_dest_pos.Scale(IntToFloat(_balloonTween.Value)/65536.0);
    balloon_pos = balloon_pos.Add(balloon_orig_pos.Scale((65536.0-IntToFloat(_balloonTween.Value))/65536.0));
  }
  return result;
}

void _MoveBalloon(Vec3* dest, float timing, TweenEasingType easingType,  TweenStyle tweenStyle )
{
  balloon_dest_pos = dest;
  balloon_orig_pos = balloon_pos;
  cBalloon.Tint(150, 85, 85, 40, 100);
  Wait(1);
  cBalloon.TweenTint(timing, 100, 100, 100, 0, 0, easingType, eNoBlockTween);
  _balloonTween.Init(timing, 0, 65536, easingType, tweenStyle);
  if(tweenStyle == eBlockTween){
    while (_UpdateMoveBalloon()) {
      Wait(1);
    }    
  }
}

void adjustAmbientVolume()
{
  float dist_center = Maths.Sqrt((Player_Pos.x-512.0)*(Player_Pos.x-512.0)+(Player_Pos.y-512.0)*(Player_Pos.y-512.0));
  int factorxy = FloatToInt(Maths.Sqrt(dist_center));
  factorxy = 3*ClampI(factorxy-15, 0, 20);
  int factorz = FloatToInt((256.0-Player_Pos.z)/4.0);
  int volume = ClampI(factorxy+factorz, 0, 75);
  volume = volume*volume/100;
  Sound_AmbientSetVolume(volume);
  
//  gDebugGUI.Visible = true;
 // debug_label.Visible = true;
  //debug_label.Text = String.Format("\nFactorxy: %d\nFactorz: %d", factorxy, factorz);
}

function room_Load()
{
  if(Game.DoOnceOnly("talk_julie_2nd"))
  {
    dFirstTalk.SetOptionState(1, eOptionOff);
    dFirstTalk.SetOptionState(2, eOptionOff);
    dFirstTalk.SetOptionState(3, eOptionOff);
    dFirstTalk.SetOptionState(4, eOptionOff);
    dFirstTalk.SetOptionState(5, eOptionOff);
    dFirstTalk.SetOptionState(6, eOptionOff);
    dFirstTalk.SetOptionState(7, eOptionOff);
    dFirstTalk.SetOptionState(8, eOptionOff);
    dFirstTalk.SetOptionState(9, eOptionOff);
    dFirstTalk.SetOptionState(10, eOptionOn);
  }
  
  if(Game.DoOnceOnly("cancel_dead_end"))
  {
    dDeadEndDialog.SetOptionState(1, eOptionOff);
    dDeadEndDialog.SetOptionState(2, eOptionOff);
    dDeadEndDialog.SetOptionState(3, eOptionOff);
    dDeadEndDialog.SetOptionState(4, eOptionOff);
    dDeadEndDialog.SetOptionState(5, eOptionOff);
    dDeadEndDialog.SetOptionState(6, eOptionOff);
    dDeadEndDialog.SetOptionState(7, eOptionOff);
    dDeadEndDialog.SetOptionState(8, eOptionOff);
    dDeadEndDialog.SetOptionState(9, eOptionOff);
    dDeadEndDialog.SetOptionState(10, eOptionOn);
  }
  
  _balloonTween.Stop();
  cRadioTower.ChangeRoom(player.Room);
  cJulie.ChangeRoom(player.Room, 318, 178);
  cRadioTower.Animate(0, 5, eRepeat, eNoBlock, eForwards);
  cRadioTower.Baseline = 5;
  player.x = 16;
  player.y = 16;
  
  _screen_height = 72.0;
  
  radiotower_pos = Vec3.Create(869.0, 891.0, 32.0);   
  balloon_dest_pos = Vec3.Create(780.0, 709.0, 128.0);
  balloon_pos = Vec3.Create(0.0, 3148.0, 256.0);
  cBalloon.Baseline = 30;
  cBalloon.Animate(0, 1, eRepeat, eNoBlock, eForwards);
  
  // for now we are using a hack on the renderer to place the baloon correctly.
  // a proper way could be splitting multiple characters for z distances and placing the balloon in the correct baseline according to z.
  // but I need to finish this asap...
  cBgRoom.Baseline = 40;
  cBgRoom2.Baseline = 20;
  cBgRoom2.x = ScreenWidth_Half;
  cBgRoom2.y = ScreenHeight;
  cBgRoom2.FaceDirection(eDirectionDown);
  
  obj_sky_fg.Transparency = 50;
  Sound_AmbientPlay(aAmb_seaside);
  adjustAmbientVolume();
  cJulie.Baseline = 1;
  cJulie.Transparency = 100;
  CustomTransition_IntantFadeOut();
  obj_blinky_stars.SetView(VIEW_BG_STARS, 0, 0);
  obj_blinky_stars.Animate(0, 5, eRepeat, eNoBlock, eForwards);
  
}

function room_AfterFadeIn()
{
  CustomTransition_FadeIn(0.33, eBlockTween);
  if(Game.DoOnceOnly("save_first_time_in_island"))
  {
    Wait(1);
    CustomSave.doAutoSave();
  }
  if(Game.DoOnceOnly("dialog_first_time_beach"))
  {
    Objective.Complete(eObjective_FindYourWayToTheBeach);
    Wait(1);
    StartDialog(dIslandFirstTime);
    Wait(1);
  }
}

function repeatedly_execute_always()
{ 
  adjustAmbientVolume();
  if(Frame & 4) return;
   
  _UpdateMoveBalloon();
  obj_sky.X = -ScreenWidth*2 + FloatToInt(Player_Angle*IntToFloat(ScreenWidth)/Maths.Pi);
  obj_night_sky.X  = -ScreenWidth*2 + FloatToInt(Player_Angle*IntToFloat(ScreenWidth)/Maths.Pi);
  obj_blinky_stars.X  = -ScreenWidth*2 + FloatToInt(Player_Angle*IntToFloat(ScreenWidth)/Maths.Pi);
  
  if(Player_Pos.z < 64.0) obj_blinky_stars.Visible = false;
  if(Player_Pos.z > 64.0) obj_blinky_stars.Visible = true;
  obj_blinky_stars.Y = 32+2*FloatToInt(ClampF(Player_Pos.z-64.0, 0.0, 188.0)/2.0);
  obj_blinky_stars.Transparency = ClampI(FloatToInt(102.0-(Player_Pos.z-64.0)/2.0), 0, 100);
  obj_night_sky.Y = FloatToInt(Player_Pos.z/2.0)+64;
  obj_night_sky.Transparency = ClampI(FloatToInt(128.0-Player_Pos.z/2.0), 0, 100);
  
  _billb_balloon = CharacterProjectionAdjust(cBalloon,  _screen_height, balloon_pos);
  if(_billb_balloon.z > 650.0) cBalloon.Baseline = cRadioTower.Baseline+1;
  else cBalloon.Baseline = 30;
  if(_billb_balloon.z > 1024.0 && cBalloon.Transparency == 0) { cBalloon.Transparency = ClampI(FloatToInt((_billb_balloon.z - 1024.0)/10.0), 0, 100);}
  
  _billb_radiotower = CharacterProjectionAdjust(cRadioTower,  _screen_height, radiotower_pos);

  
  float ddistance = 600.0;
  if(Player_Pos.z > 128.0) { ddistance = 320.0*(Player_Pos.z-128.0)/256.0+600.0; }
  
  RenderCurrentMapSurfaceWithSea(_screen_height, ddistance, 24.0);  
}

function room_RepExec()
{
  if(_doHotspot8){
    _doHotspot8 = false;
    _MoveBalloon(Vec3.Create(350.0, 1800.0, 200.0), 16.0, eEaseLinearTween, eNoBlockTween);
    BalloonMoving1 = Timer.StartRT(16.0, eOnce);
  }
  if(BalloonMoving1 != null && BalloonMoving1.RemainingTicks == 0)
  {
    BalloonMoving1 = null;
    bool_balloon_in_position = true;
    BalloonMoving2  = Timer.StartRT(12.0, eOnce);
    _MoveBalloon(Vec3.Create(788.0, 719.0, 200.0), 12.0, eEaseLinearTween, eNoBlockTween);
  }
  if(BalloonMoving2 != null && BalloonMoving2.RemainingTicks == 0)
  {
    BalloonMoving2 = null;
    _MoveBalloon(Vec3.Create(780.0, 709.0, 120.0), 16.0, eEaseLinearTween, eNoBlockTween);    
  }
}

function hHotspot20_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween);
  player.ChangeRoom(2, 115, 112);
}



function hHotspot8_Talk()
{
  if(Game.DoOnceOnly("found_lighthouse_mountain")) 
  {
    Objective.Complete(eObjective_FindLighthouseMountain);
    Objective.SetCurrent(eObjective_ReachLighthouseMountainTop);
  }
  
  if(_HasWentUpAndTalkedOnce) return;
  
  if(Player_Pos.z > 248.0)
  {
    // on the peak 
    if(Game.DoOnceOnly("RemoveWalkRoom4Once"))
    {
      RemoveWalkableArea(1);
    }
    
    if(Game.DoOnceOnly("reached_lighthouse_mountaintop")) 
    {
      Objective.Complete(eObjective_ReachLighthouseMountainTop);      
    }
    StartDialog(dAtThePeak);
  }
  else 
  {
    // almost on the peak
    StartDialog(dAreYouAtThePeak);
  }
}

// middle
function hHotspot7_Talk()
{
  if(Game.DoOnceOnly("found_lighthouse_mountain")) 
  {
    Objective.Complete(eObjective_FindLighthouseMountain);
    Objective.SetCurrent(eObjective_ReachLighthouseMountainTop);
  }
  
  if(_HasWentUpAndTalkedOnce) return;
  
  StartDialog(dMountainMiddle);
}

// peak base
function hHotspot6_Talk()
{
  if(Game.DoOnceOnly("found_lighthouse_mountain")) 
  {
    Objective.Complete(eObjective_FindLighthouseMountain);
    Objective.SetCurrent(eObjective_ReachLighthouseMountainTop);
  }
  
  if(_HasWentUpAndTalkedOnce) return;
  
  StartDialog(dAtTheBase);
}

function hHotspot9_Interact()
{
  if(_CollectedDarkDevice) return;
  if(bool_in_dialog) return;
  
  StartDialog(dDarknedDevice);
}

function hHotspot10_Interact()
{  
  if(_ConnectedDarkDevice) return;
  if(bool_in_dialog) return;

  if(_CollectedDarkDevice) {
    StartDialog(dEmptyCavity2);    
  } else {
    StartDialog(dEmptyCavity1); 
  }
}

function hHotspot21_Interact()
{
  CustomTransition_FadeOut(0.25, eBlockTween);
  player.ChangeRoom(2, 955, 287);
}

function hHotspot22_Interact()
{
  if(!_ConnectedDarkDevice) return;

  CustomTransition_FadeOut(0.25, eBlockTween);
  player.ChangeRoom(2, 259, 452);
}
