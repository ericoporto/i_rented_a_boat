// new module script
DynamicSprite* _ScreenSprite;
DynamicSprite* _ScreenSprite_Floor;
DynamicSprite* _ScreenSprite_Ceil;
DrawingSurface* _ScreenSurface;
DrawingSurface* _ScreenSurface_Floor;
DrawingSurface* _ScreenSurface_Ceil;


DynamicSprite* _ScreenSprite2;
DrawingSurface* _ScreenSurface2;

int _YBuffer[];
ViewFrame* _vfBgRoom;
ViewFrame* _vfBgRoom2;

enum RenderType {
  eRenderType_Open, 
  eRenderType_Cave,  
  eRenderType_SmallArea,
};

import void DrawVerticalLine(DrawingSurface* surf, int x, int ytop, int ybottom, int col, int size =1);

void DrawVerticalLine(DrawingSurface* surf, int x, int ytop, int ybottom, int col, int size)
{
  if(ytop < 0) ytop = 0;
  if(ytop > ybottom) return;
  
  surf.DrawingColor = col;  
  surf.DrawLine(x, ytop, x, ybottom, size); 
}

float _dt_sea;
void RenderWithSea(this MapData*, Vec3* p, float phi, float horizon, float scale_height, float distance, float col_mix_factor, RenderType rtype)
{
  float height = p.z; // let's make player vertical position be height to avoid confusing with z axis normal to the camera plane
  DrawingSurface* surf = _ScreenSurface;
    
  // precalculate viewing angle parameters
  float sinphi = Maths.Sin(phi);
  float cosphi = Maths.Cos(phi);
       
  // initialize visibility array. Y position for each column on screen  
  for (int i=Frame_Odd*2; i<ScreenWidth_Third; i+=4) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(_ScreenSurface, i, 0,  ScreenHeight, COLOR_TRANSPARENT, 2);
    DrawVerticalLine(_ScreenSurface2, i, 0,  ScreenHeight, COLOR_TRANSPARENT, 2);
  }
  for (int i=ScreenWidth_Third-Frame_Odd; i<ScreenWidth_TwoThird; i+=2) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(_ScreenSurface, i, 0, ScreenHeight, COLOR_TRANSPARENT);
    DrawVerticalLine(_ScreenSurface2, i, 0, ScreenHeight, COLOR_TRANSPARENT);
  }
  for (int i=ScreenWidth_TwoThird+Frame_Odd*2; i<ScreenWidth; i+=4) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(_ScreenSurface, i, 0, ScreenHeight, COLOR_TRANSPARENT, 2);
    DrawVerticalLine(_ScreenSurface2, i, 0, ScreenHeight, COLOR_TRANSPARENT, 2);
  }
  if(Frame_Odd) _dt_sea +=0.125;

  // Draw from front to the back (low z coordinate to high z coordinate)
  float dz = 1.0;
  float z = 1.0;
  while (z < distance) {
    if(z > 400.0) surf = _ScreenSurface2;
    
    // Find line on map. This calculation corresponds to a field of view of 90°
    float plx =  -cosphi * z - sinphi * z;
    float ply =   sinphi * z - cosphi * z;
    float prx =   cosphi * z - sinphi * z;
    float pry =  -sinphi * z - cosphi * z;
       
    // A little segment of line dx,dy that is normal to player angle, we will use to traverse from pl(x,y) to pr(x,y)
    float dx = (prx - plx) / ScreenWidth_AsFloat;
    float dy = (pry - ply) / ScreenWidth_AsFloat;
    
    // makes the camera coordinate in the same world space of the player
    plx+=p.x;
    ply+=p.y;
    
    float p_line_x = plx;
    float p_line_y = ply;
    
    // just pre-calculate to avoid doing on each step;
    float invz_scaled = scale_height/z;
    float dx_x2 = 2.0*dx;
    float dy_x2 = 2.0*dy;

    // we will use this later to darken the world far from the player
    int colormix = ClampI(FloatToInt(z*col_mix_factor/distance), 0, 15);
    int color_slide = colormix*Colors_Length;
    
    // Raster line and draw a vertical line for each segment
    //
    // `for` is broken in three parts, left and right side are drawn in two steps and only the center in a single step 
    // we also draw odd vertical lines in one frame and even in other frames
    // both of these are necessary to keep frame rate in AGS while using Dynamic Sprite drawing acceptable.
    // AGS is also slightly faster (due to allegro) to draw horizontal lines, but unfortunately we need vertical lines.
    // A straight Line in Allegro will use the vline method which is faster than drawing rectangles (Allegro integrates the rectangle with horizontal lines!)
    // So this is also why we chose to vary the line size instead of drawing rectangles when needed.
    // In ImGi I accumulated the rectangles and merged them before drawing but here I would need 57600 rectangles, which makes it not faster...

    for (int i=Frame_Odd*2; i<ScreenWidth_Third-1; i+=4) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      float height_in_map = this.Heightmap[map_idx];
      
     // if(height_in_map == 0.0 && z<512.0) height_in_map = 2.0+4.0*Maths.Sin(p_line_x/16.0+_dt_sea)*Maths.Sin(p_line_y/16.0+_dt_sea); // cheaper water in case we lose too much frames
      if(height_in_map <= 2.0 && z<300.0) {
        height_in_map = Maths.Sin(p_line_x * 0.1 + _dt_sea * 1.0) + Maths.Sin(p_line_x * 0.23  + _dt_sea * 1.5) + Maths.Sin(p_line_x * 0.33 + _dt_sea * 0.4) + Maths.Sin(p_line_y * 0.02 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.18 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.28 + _dt_sea * 0.8);
      }
      
      int height_on_screen = FloatToInt( (height - height_in_map) * invz_scaled + horizon );
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color, 2);
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      } 
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    } 
    for (int i=ScreenWidth_Third-Frame_Odd; i<ScreenWidth_TwoThird; i+=2) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      float height_in_map = this.Heightmap[map_idx];
      //if(height_in_map == 0.0 && z<512.0) height_in_map = 2.0+4.0*Maths.Sin(p_line_x/16.0+_dt_sea)*Maths.Sin(p_line_y/16.0+_dt_sea); // cheaper water in case we lose too much frames
      if(height_in_map <= 2.0 && z<300.0) {
        height_in_map = Maths.Sin(p_line_x * 0.1 + _dt_sea * 1.0) + Maths.Sin(p_line_x * 0.23  + _dt_sea * 1.5) + Maths.Sin(p_line_x * 0.33 + _dt_sea * 0.4) + Maths.Sin(p_line_y * 0.02 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.18 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.28 + _dt_sea * 0.8);
      }
      int height_on_screen = FloatToInt( (height - height_in_map) * invz_scaled + horizon );
      
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];      
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color); 
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      }      
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    }
    for (int i=ScreenWidth_TwoThird+Frame_Odd*2; i<ScreenWidth; i+=4) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      float height_in_map = this.Heightmap[map_idx];
      //if(height_in_map == 0.0 && z<512.0) height_in_map = 2.0+4.0*Maths.Sin(p_line_x/16.0+_dt_sea)*Maths.Sin(p_line_y/16.0+_dt_sea); // cheaper water in case we lose too much frames
      if(height_in_map <= 2.0 && z<300.0) {
        height_in_map = Maths.Sin(p_line_x * 0.1 + _dt_sea * 1.0) + Maths.Sin(p_line_x * 0.23  + _dt_sea * 1.5) + Maths.Sin(p_line_x * 0.33 + _dt_sea * 0.4) + Maths.Sin(p_line_y * 0.02 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.18 + _dt_sea * 1.8) + Maths.Sin(p_line_y * 0.28 + _dt_sea * 0.8);
      }
      int height_on_screen = FloatToInt( (height - height_in_map) * invz_scaled + horizon );
      
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];      
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color, 2); 
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      }
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    }

    // Go to next line and increase step size when you are far away
    z += dz;
    
    switch(rtype)
    {
      case eRenderType_Open:
        if(z< 32.0 && z>16.0 && z<512.0) dz += 0.05;
        else if(z< 64.0) dz += 0.125;
        else if(z< 256.0) dz += 0.25;
      
        break;
      case eRenderType_Cave:
        if(z< 32.0 && z>16.0) dz += 0.05;
        else if(z< 128.0) dz += 0.2;
        else if(z< 256.0) dz += 0.25;
      
        break;
      case eRenderType_SmallArea:
        if(z< 64.0 && z>16.0) dz += 0.05;
        else if(z< 256.0) dz += 0.25;
      
        break;
    }
    // I tried using GetFPS to make this adaptative, but it made the mountains constantly moving
  }
}

void Render(this MapData*, DrawingSurface* surf, Vec3* p, float phi, float horizon, float scale_height, float distance, float col_mix_factor, RenderType rtype)
{
  float height = p.z; // let's make player vertical position be height to avoid confusing with z axis normal to the camera plane
    
  // precalculate viewing angle parameters
  float sinphi = Maths.Sin(phi);
  float cosphi = Maths.Cos(phi);
       
  // initialize visibility array. Y position for each column on screen  
  for (int i=Frame_Odd*2; i<ScreenWidth_Third; i+=4) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(surf, i, 0,  ScreenHeight, COLOR_TRANSPARENT, 2);
  }
  for (int i=ScreenWidth_Third-Frame_Odd; i<ScreenWidth_TwoThird; i+=2) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(surf, i, 0, ScreenHeight, COLOR_TRANSPARENT);
  }
  for (int i=ScreenWidth_TwoThird+Frame_Odd*2; i<ScreenWidth; i+=4) {
    _YBuffer[i] = ScreenHeight;
    DrawVerticalLine(surf, i, 0, ScreenHeight, COLOR_TRANSPARENT, 2);
  }

  // Draw from front to the back (low z coordinate to high z coordinate)
  float dz = 1.0;
  float z = 1.0;
  while (z < distance) {
    // Find line on map. This calculation corresponds to a field of view of 90°
    float plx =  -cosphi * z - sinphi * z;
    float ply =   sinphi * z - cosphi * z;
    float prx =   cosphi * z - sinphi * z;
    float pry =  -sinphi * z - cosphi * z;
       
    // A little segment of line dx,dy that is normal to player angle, we will use to traverse from pl(x,y) to pr(x,y)
    float dx = (prx - plx) / ScreenWidth_AsFloat;
    float dy = (pry - ply) / ScreenWidth_AsFloat;
    
    // makes the camera coordinate in the same world space of the player
    plx+=p.x;
    ply+=p.y;
    
    float p_line_x = plx;
    float p_line_y = ply;
    
    // just pre-calculate to avoid doing on each step;
    float invz_scaled = scale_height/z;
    float dx_x2 = 2.0*dx;
    float dy_x2 = 2.0*dy;

    // we will use this later to darken the world far from the player
    int colormix = ClampI(FloatToInt(z*col_mix_factor/distance), 0, 15);
    int color_slide = colormix*Colors_Length;
    
    // Raster line and draw a vertical line for each segment
    //
    // `for` is broken in three parts, left and right side are drawn in two steps and only the center in a single step 
    // we also draw odd vertical lines in one frame and even in other frames
    // both of these are necessary to keep frame rate in AGS while using Dynamic Sprite drawing acceptable.
    // AGS is also slightly faster (due to allegro) to draw horizontal lines, but unfortunately we need vertical lines.
    // A straight Line in Allegro will use the vline method which is faster than drawing rectangles (Allegro integrates the rectangle with horizontal lines!)
    // So this is also why we chose to vary the line size instead of drawing rectangles when needed.
    // In ImGi I accumulated the rectangles and merged them before drawing but here I would need 57600 rectangles, which makes it not faster...

    for (int i=Frame_Odd*2; i<ScreenWidth_Third-1; i+=4) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      
      int height_on_screen = FloatToInt( (height - this.Heightmap[map_idx]) * invz_scaled + horizon );
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color, 2);
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      } 
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    } 
    for (int i=ScreenWidth_Third-Frame_Odd; i<ScreenWidth_TwoThird; i+=2) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      
      int height_on_screen = FloatToInt( (height - this.Heightmap[map_idx]) * invz_scaled + horizon );
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];      
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color); 
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      }      
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    }
    for (int i=ScreenWidth_TwoThird+Frame_Odd*2; i<ScreenWidth; i+=4) {
      int map_idx = this.XYtoIDX(FloatToInt(p_line_x), FloatToInt(p_line_y));
      
      int height_on_screen = FloatToInt( (height - this.Heightmap[map_idx]) * invz_scaled + horizon );
      int color = ShadedColors[this.Colormap[map_idx]+color_slide];      
      
      DrawVerticalLine(surf, i, height_on_screen, _YBuffer[i], color, 2); 
      if(height_on_screen < _YBuffer[i]) {
        _YBuffer[i] = height_on_screen;
      }
      p_line_x = plx + dx*IntToFloat(i);
      p_line_y = ply + dy*IntToFloat(i);
    }

    // Go to next line and increase step size when you are far away
    z += dz;
    
    switch(rtype)
    {
      case eRenderType_Open:
        if(z< 32.0 && z>16.0) dz += 0.05;
        else if(z< 64.0) dz += 0.125;
        else if(z< 256.0) dz += 0.25;
      
        break;
      case eRenderType_Cave:
        if(z< 32.0 && z>16.0) dz += 0.05;
        else if(z< 128.0) dz += 0.2;
        else if(z< 256.0) dz += 0.25;
      
        break;
      case eRenderType_SmallArea:
        if(z< 128.0 && z>16.0) dz += 0.05;
        if(z< 256.0 && z>128.0) dz += 0.1;
        if(z< 300.0 && z>256.0) dz += 0.2;
      
        break;
    }
    // I tried using GetFPS to make this adaptative, but it made the mountains constantly moving
  }
}

void RenderCurrentMapSurface(float scale_height, float distance, float color_mix_factor)
{
  _ScreenSurface = _ScreenSprite.GetDrawingSurface();
   
  // Call the render function with the camera parameters:
  // position, viewing angle, horizon line position, 
  // scaling factor for the height, the largest distance, 
  map[Player_Map].Render( _ScreenSurface, Player_Pos, Player_Angle /*phi*/, 
          Player_Horizon /* horizon */,  scale_height /* 64 */, distance/* 880 */,
          color_mix_factor, eRenderType_Open);
  _ScreenSurface.Release();
  
  // we are going to show this screen in a character that gets positioned in the room
  _vfBgRoom.Graphic = _ScreenSprite.Graphic;
}

void RenderCurrentMapSurfaceWithSea(float scale_height, float distance, float color_mix_factor)
{
  _ScreenSurface = _ScreenSprite.GetDrawingSurface();
  _ScreenSurface2 = _ScreenSprite2.GetDrawingSurface();
   
  // Call the render function with the camera parameters:
  // position, viewing angle, horizon line position, 
  // scaling factor for the height, the largest distance, 
  map[Player_Map].RenderWithSea(Player_Pos, Player_Angle /*phi*/, 
          Player_Horizon /* horizon */,  scale_height /* 64 */, distance/* 880 */,
          color_mix_factor, eRenderType_Open);
          
  _ScreenSurface.Release();
  _ScreenSurface2.Release();
  
  // we are going to show this screen in a character that gets positioned in the room
  _vfBgRoom.Graphic = _ScreenSprite.Graphic;
  _vfBgRoom2.Graphic = _ScreenSprite2.Graphic;
}

void RenderCurrentMapSurfaceDetail(float scale_height, float distance, float color_mix_factor)
{
  _ScreenSurface = _ScreenSprite.GetDrawingSurface();
   
  // Call the render function with the camera parameters:
  // position, viewing angle, horizon line position, 
  // scaling factor for the height, the largest distance, 
  map[Player_Map].Render( _ScreenSurface, Player_Pos, Player_Angle, 
          Player_Horizon,  scale_height, distance,
          color_mix_factor, eRenderType_SmallArea);
  _ScreenSurface.Release();
  
  // we are going to show this screen in a character that gets positioned in the room
  _vfBgRoom.Graphic = _ScreenSprite.Graphic;
}

void RenderCurrentMapAsCave(float scale_height, float distance, float color_mix_factor)
{
  _ScreenSurface_Floor = _ScreenSprite_Floor.GetDrawingSurface();
  _ScreenSurface_Ceil = _ScreenSprite_Ceil.GetDrawingSurface();
  
  Vec3* ceil_cam = Player_Pos.Clone();
  ceil_cam.z = 128.0 - ceil_cam.z;
  
  
  map[Player_Map].Render( _ScreenSurface_Floor, 
          Player_Pos, Player_Angle /*phi*/, Player_Horizon /* horizon */,  
          scale_height , distance,
          color_mix_factor, eRenderType_Cave);
          
  map[Player_Map].Render( _ScreenSurface_Ceil, 
          ceil_cam, Player_Angle /*phi*/, Player_Horizon /* horizon */,  
          scale_height/2.0, distance,
          color_mix_factor, eRenderType_Cave);
          
  _ScreenSurface_Floor.Release();
  _ScreenSurface_Ceil.Release();
    
  _ScreenSurface = _ScreenSprite.GetDrawingSurface();
  //_ScreenSurface.Clear(4193);
  _ScreenSurface.DrawImage(0, -24, _ScreenSprite_Ceil.Graphic);
  _ScreenSurface.DrawImage(0, -16, _ScreenSprite_Ceil.Graphic);
  _ScreenSurface.DrawImage(0, -12, _ScreenSprite_Ceil.Graphic);
  _ScreenSurface.DrawImage(0, -8, _ScreenSprite_Ceil.Graphic);
  _ScreenSurface.DrawImage(0, -4, _ScreenSprite_Ceil.Graphic);
  _ScreenSurface.DrawImage(0, 0, _ScreenSprite_Ceil.Graphic);
  _ScreenSprite.Flip(eFlipUpsideDown);
  _ScreenSurface.DrawImage(0, 0, _ScreenSprite_Floor.Graphic);
  _ScreenSurface.Release();
  
  _vfBgRoom.Graphic = _ScreenSprite.Graphic;  
}

void game_start()
{
  _ScreenSprite = DynamicSprite.Create(ScreenWidth, ScreenHeight, false);
  _ScreenSprite2 = DynamicSprite.Create(ScreenWidth, ScreenHeight, false);
  _ScreenSprite_Floor = DynamicSprite.Create(ScreenWidth, ScreenHeight, false);
  _ScreenSprite_Ceil = DynamicSprite.Create(ScreenWidth, ScreenHeight, false);
  _YBuffer = new int[ScreenWidth];
 
  _vfBgRoom = Game.GetViewFrame(VIEW_BG_ROOM, 0, 0);
  _vfBgRoom2 = Game.GetViewFrame(VIEW_BG_ROOM_2, 0, 0);
}