// new module script
int _GetPixelIdx(DrawingSurface* surf, int i)
{
  return surf.GetPixel(i%surf.Width, i/surf.Width);
}

int MapData::LoadHeightMap(int i_loaded)
{
  int j = i_loaded;
  DynamicSprite* dspr = DynamicSprite.CreateFromExistingSprite(this.Heightmap_Sprite);
  DrawingSurface* surf = dspr.GetDrawingSurface();
  
  this.Heightmap_Width = dspr.Width;
  this.Heightmap_Height = dspr.Height;
  this.Heightmap_Length = this.Heightmap_Width*this.Heightmap_Height;
  this.Heightmap_Width_Period = this.Heightmap_Width - 1;
  this.Heightmap_Height_Period = this.Heightmap_Height - 1;
  
  for(int i=0; j<this.Heightmap_Length && i<MAX_ITER_PER_LOAD; i++)
  {
    int color = _GetPixelIdx(surf, j);
    
    int col_r = (color & 63488) >> 11;
    int col_g = (color & 2016) >> 5;
    int col_b = (color & 31);
    col_r = (col_r << 3) & 255;
    int final_col = col_r + col_g;
        
    this.Heightmap[j] = IntToFloat(final_col);
    
    j = i_loaded + i;
  }
  
  if(surf != null) {
    surf.Release();
    surf = null;
  }
  if(dspr != null) {
    dspr.Delete();
    dspr = null;
  }
  if(j < this.Heightmap_Length) return j;
  return 0;
}

int MapData::LoadColorMap(int i_loaded)
{
  int j = i_loaded;
  DynamicSprite* dspr = DynamicSprite.CreateFromExistingSprite(this.Colormap_Sprite);
  DrawingSurface* surf = dspr.GetDrawingSurface();
  
  this.Colormap_Width = dspr.Width;
  this.Colormap_Height = dspr.Height;
  this.Colormap_Length = this.Colormap_Width*this.Colormap_Height;
  this.Colormap_Width_Period = this.Colormap_Width - 1;
  this.Colormap_Height_Period = this.Colormap_Height - 1;
  
  for(int i=0; j<this.Colormap_Length && i<MAX_ITER_PER_LOAD; i++)
  {
    this.Colormap[j] = _GetPixelIdx(surf, j);
    
    j = i_loaded + i;
  }
  
  if(surf != null) {
    surf.Release();
    surf = null;
  }
  if(dspr != null) {
    dspr.Delete();
    dspr = null;
  }
  if(j < this.Colormap_Length) return j;
  return 0;
}

int MapData::XYtoIDX(int x, int y, ) {
  if(this.LoopType) { 
    if(x<0 || x>this.Heightmap_Width_Period) return 0;
    if(y<0 || y>this.Heightmap_Height_Period) return 0;
  }
  x = x & this.Heightmap_Width_Period; //heightmap_width_period; // equivalent to % for power of 2
  y = y & this.Colormap_Height_Period; //heightmap_height_period; // equivalent to % for power of 2
  return x + y * this.Heightmap_Width;
}