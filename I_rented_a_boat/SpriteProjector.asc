// new module script
// I can't figure any good way that makes the sprite be properly positioned in place, so I am making a bad way.
// first thing, we are going to find the distance that the sprite is from the camera plane.
// this will give us a z distance
// Then we are going to use this z distance in the renderer algorithm we have for the voxel engine
// which should make it easier to find the point we are interested, in a way that moves just like the renderer we have
// this is wasteful, but we are probably not going to have many sprites anyway...

ScreenPoint* PositionBillboard(Vec3* cam_pos, float cam_angle, float horizon, float scale_height, Vec3* obj_pos)
{
  int y_on_screen, x_on_screen; // intermediary
  ScreenPoint* p = new ScreenPoint;
  
  // just storing because we are using these values twice
  float sinphi = Maths.Sin(cam_angle);
  float cosphi = Maths.Cos(cam_angle);
  
  // relative position in x,y of the obj in relation to camera
  float bill_rel_x = obj_pos.x - cam_pos.x;
  float bill_rel_y = obj_pos.y - cam_pos.y;
  float bill_rel_z = obj_pos.z - cam_pos.z;
    
  //float rotd_x = bill_rel_x*cosphi - bill_rel_y*sinphi; // x axis in camera, but doesn't look good...
  float rotd_z = bill_rel_x*sinphi + bill_rel_y*cosphi; // distance from camera
  
  if(rotd_z > 0.0) {
    p.x = -2;
    p.y = -2;
    return p;
  }
  
  float z, invz_scaled;
  
  z = -rotd_z; // IntToFloat(FloatToInt());
  
  if(AbsF(z) <= 1.0) z = 1.0;
  invz_scaled = scale_height/z;
  
  // Find line on map. This calculation corresponds to a field of view of 90°
  float plx =  -cosphi * z - sinphi * z;
  float ply =   sinphi * z - cosphi * z;
  float prx =   cosphi * z - sinphi * z;
  float pry =  -sinphi * z - cosphi * z;
     
  // A little segment of line dx,dy that is normal to player angle, we will use to traverse from pl(x,y) to pr(x,y)
  float dx = (prx - plx) / ScreenWidth_AsFloat;
  float dy = (pry - ply) / ScreenWidth_AsFloat;
  if(dx == 0.0) dx = 0.001;
  if(dy == 0.0) dy = 0.001;
  
  // makes the camera coordinate in the same world space of the player
  plx+=cam_pos.x;
  ply+=cam_pos.y;
  
  // this is a simplification of the renderer into a solution for the line of intersection of the center of the object
  y_on_screen = FloatToInt( (-bill_rel_z) * invz_scaled + horizon );    
  x_on_screen = FloatToInt(((obj_pos.x-plx)/dx + (obj_pos.y-ply)/dy)/2.0);
  
  if(x_on_screen  >= -10 && x_on_screen < 330)
  {
    p.x = x_on_screen;
    p.y = y_on_screen;
    p.z = z;
    p.w = invz_scaled;
  }
  else
  {
    p.x = -1;
    p.y = -1;
  }
  return p;
}

ScreenPoint* CharacterProjectionAdjust(Character* c, float screen_height, Vec3* world_c_pos)
{
  ScreenPoint* sp = PositionBillboard(Player_Pos, Player_Angle, Player_Horizon,  72.0, world_c_pos);

  if(sp.y > 0)
  {
    c.Transparency = 0;  
    c.x = sp.x;
    c.y = sp.y; 
    ViewFrame* vf = Game.GetViewFrame(c.View, c.Loop, c.Frame);
    c.Scaling = ClampI(FloatToInt(sp.w*IntToFloat(Game.SpriteHeight[vf.Graphic])), 5, 200);
  }
  else 
  {
    c.Transparency = 100;  
  }
  return sp;
}

ScreenPoint* ObjectProjectionAdjust(Object* o, float screen_height, Vec3* world_c_pos)
{
  ScreenPoint* sp = PositionBillboard(Player_Pos, Player_Angle, Player_Horizon,  72.0, world_c_pos);

  if(sp.y > 0)
  {
    o.Visible = true; 
    o.X = sp.x;
    o.Y = sp.y; 
  }
  else 
  {
    o.Visible = false; 
  }
  return sp;
}