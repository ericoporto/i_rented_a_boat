// new module script

float _player_speed;

enum RegionType {
  eRegionShallowWater = 1, 
  eRegionGrass = 2, 
  eRegionMarsh = 3, // this is grass with water, 
  eRegionRock = 4, 
  eRegionCave = 5, 
  eRegionMetal = 6, 
};

float _last_step_sound_x;
float _last_step_sound_y;

// we are using regions to pickup if the player step sounds
void PlayRegionStepSound(float x, float y)
{
  Region* reg = Region.GetAtRoomXY(FloatToInt(x), FloatToInt(y));
  RegionType region_type = reg.ID;
  
  _last_step_sound_x = x;
  _last_step_sound_y = y;
  
  switch(region_type)
  {
    case eRegionGrass:
      PlayRandomSound(50, 2, aStep_leaves01, aStep_leaves02);
      break;
    case eRegionMarsh:
      PlayRandomSound(50, 2, aStep_mud01, aStep_mud03);
      break;
    case eRegionShallowWater:
      PlayRandomSound(50, 4, aStep_puddle01, aStep_puddle02, aStep_puddle03, aStep_puddle04);
      break;
    case eRegionRock:
      aStep_rock01.Play(eAudioPriorityLow);
      break;
    case eRegionCave:
      PlayRandomSound(50, 2, aStep_cave01, aStep_cave02);
      break;
    case eRegionMetal:
      PlayRandomSound(30, 4, aStep_metal01, aStep_metal02, aStep_metal03, aStep_metal04);
      break;
  }
}

bool SoundWalkDistBiggerThanSq(float x, float y, float threshold)
{
  return (_last_step_sound_x - x)*(_last_step_sound_x - x)+(_last_step_sound_y - y)*(_last_step_sound_y - y) >  threshold;
}

// we are using walkable areas to say if the player can or cannot walk
bool CanWalk(float x, float y)
{
  //debug_label.Text = debug_label.Text.Append(String.Format("%d",GetWalkableAreaAtRoom(FloatToInt(x), FloatToInt(y))));
  return GetWalkableAreaAtRoom(FloatToInt(x), FloatToInt(y)) != 0;  
}

bool UpdatePlayerPositionIfPossible(float x, float y)
{
  if(CanWalk(x, y)) {
    Player_Pos.x = x;
    Player_Pos.y = y;
    return true;
  }
  
  return false;
}

bool _Go_Backward() {
  float dest_x = Player_Pos.x + Maths.Sin(Player_Angle)*_player_speed;
  float dest_y = Player_Pos.y + Maths.Cos(Player_Angle)*_player_speed; 
  return UpdatePlayerPositionIfPossible(dest_x, dest_y);
}

bool _Go_Left() {
  float dest_x = Player_Pos.x + Maths.Sin(Player_Angle-Maths.Pi/2.0)*_player_speed;
  float dest_y = Player_Pos.y + Maths.Cos(Player_Angle-Maths.Pi/2.0)*_player_speed;
  return UpdatePlayerPositionIfPossible(dest_x, dest_y);
}

bool _Go_Right() {
  float dest_x = Player_Pos.x + Maths.Sin(Player_Angle+Maths.Pi/2.0)*_player_speed;
  float dest_y = Player_Pos.y + Maths.Cos(Player_Angle+Maths.Pi/2.0)*_player_speed;
  return UpdatePlayerPositionIfPossible(dest_x, dest_y);
}

bool _Go_Forward() {
  float dest_x = Player_Pos.x - Maths.Sin(Player_Angle)*_player_speed;
  float dest_y = Player_Pos.y - Maths.Cos(Player_Angle)*_player_speed;
  bool did_it_work = UpdatePlayerPositionIfPossible(dest_x, dest_y);
  if(did_it_work) return true;
  
  float dslide;
  
  dslide = 0.0;
  for(int i=0; i<7; i++) {
    dslide += 0.2;
    dest_x = Player_Pos.x - Maths.Sin(Player_Angle+dslide)*_player_speed;
    dest_y = Player_Pos.y - Maths.Cos(Player_Angle+dslide)*_player_speed;
    did_it_work = UpdatePlayerPositionIfPossible(dest_x, dest_y);
    if(did_it_work) return true;
  }
  dslide = 0.0;
  for(int i=0; i<7; i++) {
    dslide -= 0.2;
    dest_x = Player_Pos.x - Maths.Sin(Player_Angle+dslide)*_player_speed;
    dest_y = Player_Pos.y - Maths.Cos(Player_Angle+dslide)*_player_speed;
    did_it_work = UpdatePlayerPositionIfPossible(dest_x, dest_y);
    if(did_it_work) return true;
  }
  
  did_it_work = _Go_Left();
  if(did_it_work) return true;
  did_it_work = _Go_Right();
  if(did_it_work) return true;  
  return false;  
}


void _SetPlayerSpeed() {
  /// Make sure player doesn't walk faster if we get a better computer
  _player_speed = Player_BaseSpeed * GAME_SPEED_FLOAT/IntToFloat(GetFPS());
}

void _PreventHeightClipping() {
  int map_idx = map[Player_Map].XYtoIDX(FloatToInt(Player_Pos.x), FloatToInt(Player_Pos.y));
  float limit_collision = map[Player_Map].Heightmap[map_idx]+12.0;
  Player_Pos.z = limit_collision; 
}

void _AdjustSpeedIfRunning() {
  if(Player_Running) _player_speed *= 1.33;
}


void Player_Update() {  
  if(!System.HasInputFocus) return;
  bool triedToWalk = false;
  bool hadWalked = Player_Walked;
  Player_Walked = false;
  Player_Running = false;
  _SetPlayerSpeed();
    
  // Handle mouse X axis as head roll
  Player_Angle += IntToFloat(ScreenWidth_Half - mouse.x)/60.0;
  
  // If we want head movement in Y axis, we need to fix Sprite Projector so it also corrects the Y axis and I can't seem to figure out at this time
  //if(ScreenHeight_Half-mouse.y != 0) + IntToFloat(ScreenHeight_Half-mouse.y)/10.0;
  if(Frame_Odd) mouse.SetPosition(ScreenWidth_Half, ScreenHeight_Half);
  Player_Angle = NormalizeAngle(Player_Angle); // keeps the angle between -Pi and +Pi
  
  if(actionKeys.Run) {
    Player_Running = true;
  }  
  
  _AdjustSpeedIfRunning();
  
  if(actionKeys.Forward) { Player_Walked = _Go_Forward(); triedToWalk = true;}
  if(actionKeys.Backward) { Player_Walked = _Go_Backward(); triedToWalk = true;}
  if(actionKeys.Right) { Player_Walked = _Go_Right(); triedToWalk = true;}
  if(actionKeys.Left) { Player_Walked = _Go_Left(); triedToWalk = true;}
  
  // play step sound when player start walking or after traversed a defined distance
  if(Player_Walked && (!hadWalked || SoundWalkDistBiggerThanSq(Player_Pos.x, Player_Pos.y, 256.0*Player_BaseSpeed))) PlayRegionStepSound(Player_Pos.x, Player_Pos.y);
  Player_Running = Player_Running && Player_Walked;
  
  _PreventHeightClipping();
}

void on_event (EventType event, int data)
{
  switch(event) {
    // called just before the room's 'Player Enters Room' event occurs
    case eEventEnterRoomBeforeFadein: // data = new room number
      if(data>0 && data<=MAX_MAPS) {
        int this_room = data;
        int this_map = this_room - 1;
        Player_Pos = Player_Pos.Set(IntToFloat(player.x), IntToFloat(player.y), 78.0);
        Player_Map = this_map;
        Player_Horizon = map[Player_Map].Base_Horizon;
        Player_BaseSpeed = map[Player_Map].Base_PlayerSpeed;
        cTalkie.ChangeRoom(Player_Map+1);
        cTalkie_inter.ChangeRoom(Player_Map+1);
        cTalkie.Baseline = 999;
        cTalkie_inter.Baseline = 1000;
        cBgRoom.ChangeRoom(Player_Map+1, ScreenWidth_Half, ScreenHeight, eDirectionDown);
        Screen.AutoSizeViewportOnRoomLoad = false;
        Game.Camera.SetAt(0, 0);
        Game.Camera.SetSize(ScreenWidth, ScreenHeight);
        Screen.Viewport.SetPosition(0, 0, Screen.Width, Screen.Height);
      }
    break;
    
    // called just after the room's 'Player Leaves Room' event occurs
    case eEventLeaveRoom: //  data = room number they are leaving
    break;
  }
}

void game_start()
{

}