// new module script
int GetColorRed(int ags_color) 
{
  int red = (ags_color & 63488) >> 11; // 63488 = binary 11111-000000-00000
  return (red << 3) + (red >> 2);
}

int GetColorGreen(int ags_color)
{
  int green = (ags_color & 2016) >> 5;   //  2016 = binary 00000-111111-00000
  return (green << 2) + (green >> 4);
}

int GetColorBlue(int ags_color)
{
  int blue = (ags_color & 31);          //    31 = binary 00000-000000-11111
  return (blue << 3) + (blue >> 2);  
}

// extracted from Speech Bubble, by  Gunnar Harboe (Snarky)
/// mixes any two ags colors
// Calculate the color that comes closest to a mix of c1 and c2 (at 'mix' percent c1)
int MixColors(int c1, int c2, int mix)
{
  
  if(c1 < 32) c1 = eAgsColor_Black;
  if(c2 < 32) c2 = eAgsColor_Black;
  if(mix==0) return c2;
  if(mix==100) return c1;
  int r1, g1, b1;
  int r2, g2, b2;
  
  // Extract the c1 channels
  if(c1 < 32)
  {
    r1 = (palette[c1].r << 2) + (palette[c1].r >> 4);
    g1 = (palette[c1].g << 2) + (palette[c1].g >> 4);
    b1 = (palette[c1].b << 2) + (palette[c1].b >> 4);
  }
  else
  {
    r1 = (c1 & 63488) >> 11; // 63488 = binary 11111-000000-00000
    g1 = (c1 & 2016) >> 5;   //  2016 = binary 00000-111111-00000
    b1 = (c1 & 31);          //    31 = binary 00000-000000-11111
    
    r1 = (r1 << 3) + (r1 >> 2);
    g1 = (g1 << 2) + (g1 >> 4);
    b1 = (b1 << 3) + (b1 >> 2);
  }
  
  // Extract the c2 channels
  if(c2 < 32)
  {
    r2 = (palette[c2].r << 2) + (palette[c2].r >> 4);
    g2 = (palette[c2].g << 2) + (palette[c2].g >> 4);
    b2 = (palette[c2].b << 2) + (palette[c2].b >> 4);
  }
  else
  {
    r2 = (c2 & 63488) >> 11; // 63488 = binary 11111-000000-00000
    g2 = (c2 & 2016) >> 5;   //  2016 = binary 00000-111111-00000
    b2 = (c2 & 31);          //    31 = binary 00000-000000-11111
    
    r2 = (r2 << 3) + (r2 >> 2);
    g2 = (g2 << 2) + (g2 >> 4);
    b2 = (b2 << 3) + (b2 >> 2);
  }
  
  // Calculate the mix
  int r = (r1 * mix + r2*(100-mix) + 50) / 100; // +50 to round up to nearest
  int g = (g1 * mix + g2*(100-mix) + 50) / 100;
  int b = (b1 * mix + b2*(100-mix) + 50) / 100;
  
  // Convert back to AGS color num
  r = r >> 3;  
  g = g >> 2;
  b = b >> 3;
  
  r = r << 11;
  g = g << 5;
  
  int c = r+g+b;
  if(c < 32) c = eAgsColor_Black;
    //c += 65536;
  return c;
}